{"version":3,"sources":["Containers/home.js","Containers/about.js","Containers/contact.js","Containers/nomatch.js","Components/Layout.js","Components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["home","react_default","a","createElement","about","contact","nomatch","Layout","props","Container","children","Styles","styled","div","_templateObject","NavBar","Navbar","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Item","Link","App","Fragment","NavBar_NavBar","Layout_Layout","react_router_dom","react_router","path","exact","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8PAEaA,EAAO,kBAChBC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,yBCFKC,EAAQ,kBACjBH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,4BCFKE,EAAU,kBACnBJ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,4BCFKG,EAAU,kBACnBL,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,kCCDKI,EAAS,SAACC,GAAD,OAClBP,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACKD,EAAME,6SCDf,IAAMC,QAASC,EAAOC,IAAVC,KAaCC,EAAS,kBAClBd,EAAAC,EAAAC,cAACQ,EAAD,KACIV,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAQC,OAAS,MACbhB,EAAAC,EAAAC,cAACa,EAAA,EAAOE,MAAR,CAAcC,KAAK,KAAnB,qBACAlB,EAAAC,EAAAC,cAACa,EAAA,EAAOI,OAAR,CAAeC,gBAAc,qBAC7BpB,EAAAC,EAAAC,cAACa,EAAA,EAAOM,SAAR,CAAiBC,GAAG,oBAChBtB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAKC,UAAU,WACXxB,EAAAC,EAAAC,cAACqB,EAAA,EAAIE,KAAL,KAAUzB,EAAAC,EAAAC,cAACqB,EAAA,EAAIG,KAAL,CAAUR,KAAO,KAAjB,WACVlB,EAAAC,EAAAC,cAACqB,EAAA,EAAIE,KAAL,KAAUzB,EAAAC,EAAAC,cAACqB,EAAA,EAAIG,KAAL,CAAUR,KAAO,YAAjB,YACVlB,EAAAC,EAAAC,cAACqB,EAAA,EAAIE,KAAL,KAAUzB,EAAAC,EAAAC,cAACqB,EAAA,EAAIG,KAAL,CAAUR,KAAO,cAAjB,mBCKfS,mLAlBX,OACE3B,EAAAC,EAAAC,cAACF,EAAAC,EAAM2B,SAAP,KACE5B,EAAAC,EAAAC,cAAC2B,EAAD,MACE7B,EAAAC,EAAAC,cAAC4B,EAAD,KACE9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,KACE/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,KACEhC,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWpC,IACjCC,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAOC,KAAK,SAASC,OAAK,EAACC,UAAWhC,IACtCH,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAOC,KAAK,WAAWC,OAAK,EAACC,UAAW/B,IACxCJ,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAOG,UAAW9B,eAXhB+B,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8f8ae8bc.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const home = () => (\n    <div>\n        <h2>Hello all</h2>\n    </div>\n)","import React from \"react\";\n\nexport const about = () => (\n    <div>\n        <h2> about page </h2>\n    </div>\n)","import React from \"react\";\n\nexport const contact = () => (\n    <div>\n        <h2> contact me </h2>\n    </div>\n)","import React from \"react\";\n\nexport const nomatch = () => (\n    <div>\n        <h2> no match </h2>\n    </div>\n)","import React from \"react\";\nimport { Container } from \"react-bootstrap\";\n\nexport const Layout = (props) => (\n    <Container>\n        {props.children}\n    </Container>\n)","import React from \"react\";\nimport {Nav, Navbar} from \"react-bootstrap\";\nimport styled from \"styled-components\";\n\nconst Styles = styled.div`\n    .navbar {\n        background-color: #0E3746;\n    }\n    .navbar-brand, .navbar-nav .nav-link {\n        color: #EAE8DC \n\n        &: hover{\n            color: #BE2623;\n        }\n    }\n`;\n\nexport const NavBar = () => (\n    <Styles>\n        <Navbar expand = \"lg\">\n            <Navbar.Brand href=\"/\"> Samuel Courtney </Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"ml-auto\">\n                    <Nav.Item><Nav.Link href = \"/\"> home </Nav.Link></Nav.Item>\n                    <Nav.Item><Nav.Link href = \"/#/about\"> about </Nav.Link></Nav.Item>\n                    <Nav.Item><Nav.Link href = \"/#/contact\"> contact </Nav.Link></Nav.Item>\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n    </Styles>\n)","import React, { Component } from 'react';\nimport { HashRouter, Route, Switch} from 'react-router-dom';\nimport { home } from './Containers/home';\nimport { about } from './Containers/about';\nimport { contact } from './Containers/contact';\nimport { nomatch } from './Containers/nomatch';\nimport { Layout } from './Components/Layout';\nimport { NavBar } from './Components/NavBar';\n\n//import { Jumbotron } from './components/Jumbotron';\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar/>\n          <Layout>\n            <HashRouter>\n              <Switch>\n                <Route path='/' exact component={home}/>\n                <Route path='/about' exact component={about} />\n                <Route path='/contact' exact component={contact} />\n                <Route component={nomatch} />\n                </Switch>\n            </HashRouter>\n          </Layout>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}